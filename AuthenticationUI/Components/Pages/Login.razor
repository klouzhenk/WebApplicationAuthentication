@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Security.Claims


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <AuthorizeView Context="AuthenticationContext">
        <NotAuthorized>
            <h2 class="text-center mb-3" style="font-size:36px">Login</h2>
            <div class="row">
                <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                    <EditForm Model="@User" OnSubmit="Authenticate" FormName="LoginForm">
                        <div class="mb-3 text-center flex-column">
                            <img src="/favicon.png" style="max-height: 5rem;" />
                            <h3>LOGIN</h3>
                        </div>

                        <div class="mb-3">
                            <label>Username</label>
                            <InputText @bind-Value="User.Name" class="form-control" placeholder="Username" />
                        </div>

                        <div class="mb-3">
                            <label>Password</label>
                            <InputText @bind-Value="User.Password" class="form-control" placeholder="Password" type="password" />
                        </div>

                        <div class="mb-3 text-center">
                            <span class="text-danger">
                                @_errorMessage
                            </span>
                        </div>

                        <div class="mb-3 d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                Login
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </NotAuthorized>
        <Authorized>
            <h2 class="text-center mb-3" style="font-size:36px">Hello, @User.Name</h2>
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    [SupplyParameterFromForm]
    public UserModel User { get; set; } = new();

    private string _errorMessage;
    private bool _isAuthenticated = false;
    private string _authToken;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isAuthenticated)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", _authToken);
            _isAuthenticated = false; // Скидання прапора після збереження токена
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_isAuthenticated)
        {
            Navigation.NavigateTo("/weather", true);
        }
    }

    private async Task Authenticate()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/Auth/login", new { Username = User.Name, Password = User.Password });

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadFromJsonAsync<JwtResponse>();
                if (responseContent != null)
                {
                    _authToken = responseContent.Token;
                    _isAuthenticated = true;

                    StateHasChanged();

                    var claims = new List<Claim>
                    {
                        new Claim(ClaimTypes.Name, "admin")
                    };

                    var identity = new ClaimsIdentity(claims, "apiauth_type");
                    var principal = new ClaimsPrincipal(identity);

                    ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(principal);
                }
                else
                {
                    _errorMessage = "Invalid response from server";
                }
            }
            else
            {
                _errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
    }

}
