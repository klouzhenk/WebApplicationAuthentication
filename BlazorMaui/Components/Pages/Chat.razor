@page "/chat"
@using System.Security.Claims
@inject BlazorMaui.Services.ChatService ChatService

@using Microsoft.Extensions.Localization
@using WebApplicationShared.Locales
@inject IStringLocalizer<WebApplicationShared.Locales.Resource> localizer

<h1 class="page__title">@localizer["ChatTitle"]</h1>

<p class="page__paragraph">@localizer["ChatStatusTitle"]: @ChatService.ConnectionState</p>

<div class="chat__container">
    <ul class="chat__msg-list">
        @foreach (var chatMessage in ChatMessages)
        {
            <li class="chat__msg-el">
                <h6 class="chat__msg--username">@chatMessage.User</h6>
                <p class="chat__msg--text">@chatMessage.Message</p>
            </li>
        }
    </ul>
</div>

<div class="send-msg-box">
    <input class="form__input-area" @bind="Message" placeholder=@localizer["ChatMsgPlaceholder"] />
    <button class="form__btn-submit" @onclick="SendMessage">@localizer["ChatBtnMsgSend"]</button>
</div>

@code {
    private string User { get; set; }
    private string Message { get; set; }
    private List<ChatMessage> ChatMessages { get; set; } = new List<ChatMessage>();

    [Inject] private CustomAuthStateProvider CustomAuthStateProvider { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChatService.MessageReceived += OnMessageReceived;
        await ChatService.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CustomAuthStateProvider.CheckAuthenticationAfterRendering();

            try
            {
                var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();

                if (!authState.User.Identity.IsAuthenticated)
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }

                User = authState.User.FindFirstValue(ClaimTypes.Name);
            }
            catch (HttpRequestException ex)
            {
                Console.Error.WriteLine($"Failed to get messages: {ex.Message}");
            }

            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        await ChatService.SendMessageAsync(User, Message);
        Message = string.Empty;
    }

    private void OnMessageReceived(string user, string message)
    {
        ChatMessages.Add(new ChatMessage { User = user, Message = message });
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ChatService.MessageReceived -= OnMessageReceived;
    }

    private class ChatMessage
    {
        public string User { get; set; }
        public string Message { get; set; }
    }
}
